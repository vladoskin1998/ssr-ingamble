#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –ø–æ—à—É–∫—É —Ñ–∞–π–ª—ñ–≤
function findFiles(dir, extensions, result = []) {
    const files = fs.readdirSync(dir);
    
    for (const file of files) {
        const filePath = path.join(dir, file);
        const stat = fs.statSync(filePath);
        
        if (stat.isDirectory() && !file.startsWith('.') && file !== 'node_modules') {
            findFiles(filePath, extensions, result);
        } else if (stat.isFile() && extensions.some(ext => file.endsWith(ext))) {
            result.push(filePath);
        }
    }
    
    return result;
}

// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∑–∞–º—ñ–Ω - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ patterns —ñ —ó—Ö Next.js –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–∫–∏
const replacements = [
    // –Ü–∫–æ–Ω–∫–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ
    {
        pattern: /<img\s+src="\/img\/icons\/star\.svg"\s+alt="star"\s*\/?>|<img\s+loading="lazy"\s+src="\/img\/icons\/star\.svg"\s+alt="star"\s*\/?>/g,
        replacement: '<Image src="/img/icons/star.svg" alt="star" width={16} height={16} />'
    },
    {
        pattern: /<img\s+src="\/img\/icons\/like\.svg"\s+alt="like"\s*\/?>|<img\s+loading="lazy"\s+src="\/img\/icons\/like\.svg"\s+alt="like"\s*\/?>/g,
        replacement: '<Image src="/img/icons/like.svg" alt="like" width={16} height={16} />'
    },
    {
        pattern: /<img\s+src="\/img\/icons\/gift\.svg"\s+alt="gift"\s*\/?>|<img\s+loading="lazy"\s+src="\/img\/icons\/gift\.svg"\s+alt="gift"\s*\/?>/g,
        replacement: '<Image src="/img/icons/gift.svg" alt="gift" width={20} height={20} />'
    },
    {
        pattern: /<img\s+src="\/img\/icons\/shield\.svg"\s+alt="shield"\s*\/?>|<img\s+loading="lazy"\s+src="\/img\/icons\/shield\.svg"\s+alt="shield"\s*\/?>/g,
        replacement: '<Image src="/img/icons/shield.svg" alt="shield" width={20} height={20} />'
    },
    {
        pattern: /<img\s+src="\/img\/icons\/deposit-icon\.svg"\s+alt="deposit-icon"\s*\/?>|<img\s+loading="lazy"\s+src="\/img\/icons\/deposit-icon\.svg"\s+alt="deposit-icon"\s*\/?>/g,
        replacement: '<Image src="/img/icons/deposit-icon.svg" alt="deposit-icon" width={24} height={24} />'
    },
    {
        pattern: /<img\s+src="\/img\/icons\/roulette\.svg"\s+alt="roulette"\s*\/?>|<img\s+loading="lazy"\s+src="\/img\/icons\/roulette\.svg"\s+alt="roulette"\s*\/?>/g,
        replacement: '<Image src="/img/icons/roulette.svg" alt="roulette" width={32} height={32} />'
    },
    {
        pattern: /<img\s+src="\/img\/icons\/arrow-yellow\.svg"\s+alt="arrow-yellow"\s*\/?>|<img\s+loading="lazy"\s+src="\/img\/icons\/arrow-yellow\.svg"\s+alt="arrow-yellow"\s*\/?>/g,
        replacement: '<Image src="/img/icons/arrow-yellow.svg" alt="arrow-yellow" width={16} height={16} />'
    },
    {
        pattern: /<img\s+src="\/img\/icons\/close\.svg"\s+alt="close"\s*\/?>|<img\s+loading="lazy"\s+src="\/img\/icons\/close\.svg"\s+alt="close"\s*\/?>/g,
        replacement: '<Image src="/img/icons/close.svg" alt="close" width={16} height={16} />'
    },
    {
        pattern: /<img\s+src="\/img\/icons\/check-icon\.svg"\s+alt="check"\s*\/?>|<img\s+loading="lazy"\s+src="\/img\/icons\/check-icon\.svg"\s+alt="check"\s*\/?>/g,
        replacement: '<Image src="/img/icons/check-icon.svg" alt="check" width={20} height={20} />'
    },
    {
        pattern: /<img\s+src="\/img\/icons\/error-icon\.svg"\s+alt="error"\s*\/?>|<img\s+loading="lazy"\s+src="\/img\/icons\/error-icon\.svg"\s+alt="error"\s*\/?>/g,
        replacement: '<Image src="/img/icons/error-icon.svg" alt="error" width={20} height={20} />'
    },
    
    // Title images –¥–ª—è –±–ª–æ–∫—ñ–≤
    {
        pattern: /<img\s+src=\{([^}]+)\.items_block\.title_image\}\s+alt="security"\s*\/?>|<img\s+loading="lazy"\s+src=\{([^}]+)\.items_block\.title_image\}\s+alt="security"\s*\/?>/g,
        replacement: '<Image src={$1.items_block.title_image} alt="security" width={400} height={250} />'
    },
    
    // –ü—Ä–∞–ø–æ—Ä—Ü—ñ –∫—Ä–∞—ó–Ω
    {
        pattern: /<img\s+loading="lazy"\s+alt=\{([^}]+)\?\.\w+\}\s+src=\{([^}]+)\?\.\w+\s+\|\|\s+([^}]+)\?\.\w+\s+\|\|\s+''\}\s+width=\{20\}\s+height=\{20\}\s*\/?>|<img\s+alt=\{([^}]+)\?\.\w+\}\s+src=\{([^}]+)\?\.\w+\s+\|\|\s+([^}]+)\?\.\w+\s+\|\|\s+''\}\s+width=\{20\}\s+height=\{20\}\s*\/?>/g,
        replacement: '<Image alt={$1?.name} src={$2?.image || $3?.flag_image || ""} width={20} height={20} />'
    },
    
    // –ó–∞–≥–∞–ª—å–Ω—ñ img —Ç–µ–≥–∏ –∑ –¥–∏–Ω–∞–º—ñ—á–Ω–∏–º–∏ src
    {
        pattern: /<img\s+loading="lazy"\s+src=\{([^}]+)\}\s+alt="([^"]+)"\s*\/?>|<img\s+src=\{([^}]+)\}\s+alt="([^"]+)"\s*\/?>/g,
        replacement: (match, src1, alt1, src2, alt2) => {
            const src = src1 || src2;
            const alt = alt1 || alt2;
            // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ä–æ–∑–º—ñ—Ä–∏ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            if (alt.includes('logo') || alt.includes('casino')) {
                return `<Image src={${src}} alt="${alt}" width={60} height={60} />`;
            } else if (alt.includes('game') || alt.includes('slot')) {
                return `<Image src={${src}} alt="${alt}" width={80} height={80} />`;
            } else {
                return `<Image src={${src}} alt="${alt}" width={100} height={100} />`;
            }
        }
    }
];

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —ñ–º–ø–æ—Ä—Ç—É Image, —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î
function addImageImport(content) {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ —î —ñ–º–ø–æ—Ä—Ç Image
    if (content.includes("import Image from 'next/image'")) {
        return content;
    }
    
    // –®—É–∫–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π —ñ–º–ø–æ—Ä—Ç –∑ next
    const nextImportMatch = content.match(/import\s+.*from\s+['"]next\/[^'"]+['"]/g);
    if (nextImportMatch) {
        const lastNextImport = nextImportMatch[nextImportMatch.length - 1];
        const importIndex = content.lastIndexOf(lastNextImport);
        const endOfImport = content.indexOf('\n', importIndex);
        return content.slice(0, endOfImport + 1) + "import Image from 'next/image'\n" + content.slice(endOfImport + 1);
    }
    
    // –Ø–∫—â–æ –Ω–µ–º–∞—î —ñ–º–ø–æ—Ä—Ç—ñ–≤ –∑ next, —à—É–∫–∞—î–º–æ –±—É–¥—å-—è–∫—ñ React —ñ–º–ø–æ—Ä—Ç–∏
    const reactImportMatch = content.match(/import\s+.*from\s+['"]react['"]/);
    if (reactImportMatch) {
        const importIndex = content.indexOf(reactImportMatch[0]);
        const endOfImport = content.indexOf('\n', importIndex);
        return content.slice(0, endOfImport + 1) + "import Image from 'next/image'\n" + content.slice(endOfImport + 1);
    }
    
    // –Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –¥–æ–¥–∞—î–º–æ –Ω–∞ –ø–æ—á–∞—Ç–æ–∫
    return "import Image from 'next/image'\n" + content;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —Ñ–∞–π–ª—É
function processFile(filePath) {
    try {
        let content = fs.readFileSync(filePath, 'utf8');
        let hasChanges = false;
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î img —Ç–µ–≥–∏ –≤ —Ñ–∞–π–ª—ñ
        if (!content.includes('<img')) {
            return { processed: false, changes: 0 };
        }
        
        let changeCount = 0;
        
        // –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –≤—Å—ñ –∑–∞–º—ñ–Ω–∏
        replacements.forEach(({ pattern, replacement }) => {
            const beforeReplace = content;
            if (typeof replacement === 'function') {
                content = content.replace(pattern, replacement);
            } else {
                content = content.replace(pattern, replacement);
            }
            
            if (beforeReplace !== content) {
                hasChanges = true;
                // –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–º—ñ–Ω –¥–ª—è —Ü—å–æ–≥–æ pattern
                const matches = beforeReplace.match(pattern);
                if (matches) {
                    changeCount += matches.length;
                }
            }
        });
        
        // –Ø–∫—â–æ –±—É–ª–∏ –∑–º—ñ–Ω–∏, –¥–æ–¥–∞—î–º–æ —ñ–º–ø–æ—Ä—Ç Image —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ–∞–π–ª
        if (hasChanges) {
            content = addImageImport(content);
            fs.writeFileSync(filePath, content, 'utf8');
            return { processed: true, changes: changeCount };
        }
        
        return { processed: false, changes: 0 };
    } catch (error) {
        console.error(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ñ–∞–π–ª—É ${filePath}:`, error.message);
        return { processed: false, changes: 0, error: error.message };
    }
}

// –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
function main() {
    console.log('üöÄ –ü–æ—á–∏–Ω–∞—é –∑–∞–º—ñ–Ω—É <img> —Ç–µ–≥—ñ–≤ –Ω–∞ Next.js <Image> –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏...\n');
    
    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ .tsx —Ç–∞ .jsx —Ñ–∞–π–ª–∏
    const files = findFiles('./src', ['.tsx', '.jsx']);
    
    console.log(`üìÅ –ó–Ω–∞–π–¥–µ–Ω–æ ${files.length} —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –æ–±—Ä–æ–±–∫–∏\n`);
    
    let totalProcessed = 0;
    let totalChanges = 0;
    const processedFiles = [];
    const errorFiles = [];
    
    files.forEach(file => {
        const result = processFile(file);
        
        if (result.error) {
            errorFiles.push({ file, error: result.error });
        } else if (result.processed) {
            totalProcessed++;
            totalChanges += result.changes;
            processedFiles.push({ file, changes: result.changes });
            console.log(`‚úÖ ${file} - ${result.changes} –∑–∞–º—ñ–Ω`);
        }
    });
    
    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏:');
    console.log(`‚úÖ –û–±—Ä–æ–±–ª–µ–Ω–æ —Ñ–∞–π–ª—ñ–≤: ${totalProcessed}`);
    console.log(`üîÑ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–º—ñ–Ω: ${totalChanges}`);
    
    if (errorFiles.length > 0) {
        console.log(`\n‚ùå –ü–æ–º–∏–ª–∫–∏ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ ${errorFiles.length} —Ñ–∞–π–ª—ñ–≤:`);
        errorFiles.forEach(({ file, error }) => {
            console.log(`  - ${file}: ${error}`);
        });
    }
    
    if (processedFiles.length > 0) {
        console.log('\nüìù –î–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç:');
        processedFiles.forEach(({ file, changes }) => {
            console.log(`  ${file} - ${changes} –∑–∞–º—ñ–Ω`);
        });
    }
    
    console.log('\n‚ú® –ì–æ—Ç–æ–≤–æ! –í—Å—ñ <img> —Ç–µ–≥–∏ –∑–∞–º—ñ–Ω–µ–Ω–æ –Ω–∞ Next.js <Image> –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏.');
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–∫—Ä–∏–ø—Ç
if (require.main === module) {
    main();
}

module.exports = { processFile, addImageImport };
