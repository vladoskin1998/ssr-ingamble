#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const glob = require('glob');

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–º—ñ–Ω–∏ img —Ç–µ–≥—ñ–≤ –Ω–∞ Image –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
function replaceImgTags(content, filePath) {
    let updatedContent = content;
    let hasChanges = false;

    // –î–æ–¥–∞—î–º–æ —ñ–º–ø–æ—Ä—Ç Image —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î
    if (!updatedContent.includes("import Image from 'next/image'") && updatedContent.includes('<img')) {
        // –ó–Ω–∞–π–¥–µ–º–æ –º—ñ—Å—Ü–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ —ñ–º–ø–æ—Ä—Ç—É
        const importMatch = updatedContent.match(/(import.*from ['"][^'"]*['"])/g);
        if (importMatch) {
            const lastImport = importMatch[importMatch.length - 1];
            const importIndex = updatedContent.indexOf(lastImport) + lastImport.length;
            updatedContent = updatedContent.slice(0, importIndex) + "\nimport Image from 'next/image'" + updatedContent.slice(importIndex);
            hasChanges = true;
        }
    }

    // –ó–∞–º—ñ–Ω–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ img —Ç–µ–≥—ñ–≤
    const replacements = [
        // –ü—Ä–æ—Å—Ç—ñ —ñ–∫–æ–Ω–∫–∏ –∑ —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏–º–∏ —Ä–æ–∑–º—ñ—Ä–∞–º–∏
        {
            pattern: /<img\s+src="\/img\/icons\/([^"]+)"\s+alt="([^"]+)"\s*\/?>|<img\s+alt="([^"]+)"\s+src="\/img\/icons\/([^"]+)"\s*\/?>/g,
            replacement: (match, src1, alt1, alt2, src2) => {
                const src = src1 || src2;
                const alt = alt1 || alt2;
                return `<Image src="/img/icons/${src}" alt="${alt}" width={16} height={16} />`;
            }
        },
        // –Ü–∫–æ–Ω–∫–∏ –∑ loading="lazy"
        {
            pattern: /<img\s+loading="lazy"\s+src="\/img\/icons\/([^"]+)"\s+alt="([^"]+)"\s*\/?>|<img\s+alt="([^"]+)"\s+src="\/img\/icons\/([^"]+)"\s+loading="lazy"\s*\/?>/g,
            replacement: (match, src1, alt1, alt2, src2) => {
                const src = src1 || src2;
                const alt = alt1 || alt2;
                return `<Image src="/img/icons/${src}" alt="${alt}" width={16} height={16} />`;
            }
        },
        // –õ–æ–≥–æ—Ç–∏–ø–∏ –∫–∞–∑–∏–Ω–æ —Ç–∞ —ñ–Ω—à—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ –¥–∏–Ω–∞–º—ñ—á–Ω–∏–º–∏ src
        {
            pattern: /<img\s+src=\{([^}]+)\}\s+alt="([^"]+)"\s*\/?>|<img\s+alt="([^"]+)"\s+src=\{([^}]+)\}\s*\/?>/g,
            replacement: (match, src1, alt1, alt2, src2) => {
                const src = src1 || src2;
                const alt = alt1 || alt2;
                return `<Image src={${src}} alt="${alt}" width={100} height={60} />`;
            }
        },
        // –ü—Ä–∞–ø–æ—Ä—Ü—ñ –∫—Ä–∞—ó–Ω –∑ —Ä–æ–∑–º—ñ—Ä–∞–º–∏
        {
            pattern: /<img\s+(?:loading="lazy"\s+)?alt="([^"]+)"\s+src=\{([^}]+)\}\s+width=\{?(\d+)\}?\s+height=\{?(\d+)\}?\s*\/?>|<img\s+src=\{([^}]+)\}\s+(?:loading="lazy"\s+)?width="(\d+)"\s+height="(\d+)"\s+alt="([^"]+)"\s*\/?>/g,
            replacement: (match, alt1, src1, w1, h1, src2, w2, h2, alt2) => {
                const src = src1 || src2;
                const alt = alt1 || alt2;
                const width = w1 || w2;
                const height = h1 || h2;
                return `<Image alt="${alt}" src={${src}} width={${width}} height={${height}} />`;
            }
        }
    ];

    // –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –∑–∞–º—ñ–Ω–∏
    replacements.forEach(({ pattern, replacement }) => {
        if (pattern.test(updatedContent)) {
            updatedContent = updatedContent.replace(pattern, replacement);
            hasChanges = true;
        }
    });

    return { content: updatedContent, hasChanges };
}

// –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
function main() {
    const srcPattern = 'src/**/*.{tsx,jsx}';
    const files = glob.sync(srcPattern, { 
        ignore: ['**/node_modules/**', '**/.*/**'] 
    });

    console.log(`–ó–Ω–∞–π–¥–µ–Ω–æ ${files.length} —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –æ–±—Ä–æ–±–∫–∏...`);

    let processedCount = 0;
    let modifiedCount = 0;

    files.forEach(filePath => {
        try {
            const content = fs.readFileSync(filePath, 'utf8');
            
            // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ñ–∞–π–ª–∏ –±–µ–∑ img —Ç–µ–≥—ñ–≤
            if (!content.includes('<img')) {
                return;
            }

            const { content: newContent, hasChanges } = replaceImgTags(content, filePath);
            
            processedCount++;
            
            if (hasChanges) {
                fs.writeFileSync(filePath, newContent, 'utf8');
                modifiedCount++;
                console.log(`‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ: ${filePath}`);
            }
        } catch (error) {
            console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ ${filePath}:`, error.message);
        }
    });

    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏:`);
    console.log(`- –û–±—Ä–æ–±–ª–µ–Ω–æ —Ñ–∞–π–ª—ñ–≤: ${processedCount}`);
    console.log(`- –ó–º—ñ–Ω–µ–Ω–æ —Ñ–∞–π–ª—ñ–≤: ${modifiedCount}`);
    console.log(`\nüéâ –ó–∞–º—ñ–Ω–∞ img —Ç–µ–≥—ñ–≤ –Ω–∞ Image –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∞!`);
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ —è–∫—â–æ —Ñ–∞–π–ª –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É
if (require.main === module) {
    main();
}

module.exports = { replaceImgTags };
