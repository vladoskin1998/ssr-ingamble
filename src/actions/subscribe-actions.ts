'use server'

import $api from '@/http'

export type SubscribeActionState = {
    error?: string
    success?: boolean
    message?: string
}

export async function subscribeUser(
    prevState: SubscribeActionState,
    formData: FormData
): Promise<SubscribeActionState> {
    const email = formData.get('email') as string
    const agreement = formData.get('agreement') as string

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è
    if (!email) {
        return {
            error: 'Email –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π',
            success: false
        }
    }

    if (!agreement || agreement !== 'on') {
        return {
            error: '–ü–æ—Ç—Ä—ñ–±–Ω–æ –ø—Ä–∏–π–Ω—è—Ç–∏ —É–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è',
            success: false
        }
    }

    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
    if (!emailRegex.test(email)) {
        return {
            error: '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç email',
            success: false
        }
    }

    try {
        await $api.post('save-user-email/', { email })
        
        return {
            success: true,
            message: '–í–∏ —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è! üéâ'
        }
    } catch {
        return {
            error: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—ñ–¥–ø–∏—Å—Ü—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.',
            success: false
        }
    }
}
